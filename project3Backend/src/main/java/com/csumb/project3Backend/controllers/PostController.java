package com.csumb.project3Backend.controllers;

import com.google.api.core.ApiFuture;
import com.google.cloud.firestore.*;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;


/**
 * This class is used to define the API endpoints for posts and comments(create, edit, delete)
 * Endpoints for fetching posts, (all, by user, by topic) are for FeedController
 */


@RestController
@RequestMapping("/posts")
public class PostController {

    private final Firestore db;

    public PostController(Firestore db){
        this.db = db;
    }

    //creates a post
    @PostMapping("/createPost")
    public Map<String, Object> createPost(@RequestBody Map<String, Object> post) throws InterruptedException, ExecutionException{
        String text = (String) post.get("text");
        String user = (String) post.get("user");
        String rating = (String) post.get("rating");
        String medium = (String) post.get("medium");
        String topic = (String) post.get("topic");

        Map<String, Object> newPost = new HashMap<>();
        newPost.put("text", text);
        newPost.put("user", user);
        newPost.put("rating", rating);
        newPost.put("medium", medium);
        newPost.put("topic", topic);


        CollectionReference postsRef = db.collection("posts");
        ApiFuture<DocumentReference> addedPostRef = postsRef.add(newPost);

        try {
            // Check if the post was added
            DocumentReference documentRef = addedPostRef.get();
            if (documentRef != null) {
                return newPost;
            }
        }
        catch (Exception e) {
            System.out.println("Error adding post: " + e.getMessage());
        }
        return new HashMap<>();
    }



    @PostMapping("/editPost")
    public Map<String, Object> editPost(@RequestBody Map<String, Object> postEdit) throws InterruptedException, ExecutionException {
        String text = (String) postEdit.get("text");
        String user = (String) postEdit.get("user");
        String rating = (String) postEdit.get("rating");
        String medium = (String) postEdit.get("medium");
        String topic = (String) postEdit.get("topic");

        //ID will be autogenerated, when the user selects their post to edit the autogenerated ID will
        //be included in the parameters for this request
        //we won't include it as part of the document, but use it to reference the existing one
        String ID = (String) postEdit.get("ID");

        Map<String, Object> newPost = new HashMap<>();
        newPost.put("text", text);
        newPost.put("user", user);
        newPost.put("rating", rating);
        newPost.put("medium", medium);
        newPost.put("topic", topic);


        CollectionReference postsRef = db.collection("posts");
        ApiFuture<DocumentReference> ref = db.collection("posts").document(ID).set(newPost);

        try {
            // Check if the post was edited
            DocumentReference successref = ref.get();
            if (successref != null) {
                return newPost;
            }
        } catch (Exception e) {
            System.out.println("Error adding post: " + e.getMessage());
        }
        return new HashMap<>();
    }



    @PostMapping("/deletePost")
    public boolean deletePost(String ID) throws InterruptedException, ExecutionException {

        CollectionReference postsRef = db.collection("posts");
        ApiFuture<WriteResult> res = db.collection("posts").document(ID).delete();

        try {
            // Check if the post was added
            WriteResult delRes = res.get();
            if (delRes != null) {
                return newPost;
            }
        } catch (Exception e) {
            System.out.println("Error deleting post: " + e.getMessage());
        }
        return new HashMap<>();
    }
}